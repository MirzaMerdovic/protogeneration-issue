// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ContractBeta.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Contracts.Grpc.Beta {
  public static partial class BetaService
  {
    static readonly string __ServiceName = "contracts.grpc.beta.BetaService";

    static readonly grpc::Marshaller<global::Contracts.Grpc.Beta.GetLinkedAlphaRequest> __Marshaller_contracts_grpc_beta_GetLinkedAlphaRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Contracts.Grpc.Beta.GetLinkedAlphaRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Contracts.Grpc.Beta.GetLinkedAlphaResponse> __Marshaller_contracts_grpc_beta_GetLinkedAlphaResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Contracts.Grpc.Beta.GetLinkedAlphaResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Contracts.Grpc.Beta.GetLinkedAlphaRequest, global::Contracts.Grpc.Beta.GetLinkedAlphaResponse> __Method_GetLinkedAlpha = new grpc::Method<global::Contracts.Grpc.Beta.GetLinkedAlphaRequest, global::Contracts.Grpc.Beta.GetLinkedAlphaResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetLinkedAlpha",
        __Marshaller_contracts_grpc_beta_GetLinkedAlphaRequest,
        __Marshaller_contracts_grpc_beta_GetLinkedAlphaResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Contracts.Grpc.Beta.ContractBetaReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of BetaService</summary>
    public abstract partial class BetaServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Contracts.Grpc.Beta.GetLinkedAlphaResponse> GetLinkedAlpha(global::Contracts.Grpc.Beta.GetLinkedAlphaRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for BetaService</summary>
    public partial class BetaServiceClient : grpc::ClientBase<BetaServiceClient>
    {
      /// <summary>Creates a new client for BetaService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public BetaServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for BetaService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public BetaServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected BetaServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected BetaServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Contracts.Grpc.Beta.GetLinkedAlphaResponse GetLinkedAlpha(global::Contracts.Grpc.Beta.GetLinkedAlphaRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLinkedAlpha(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Contracts.Grpc.Beta.GetLinkedAlphaResponse GetLinkedAlpha(global::Contracts.Grpc.Beta.GetLinkedAlphaRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetLinkedAlpha, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Contracts.Grpc.Beta.GetLinkedAlphaResponse> GetLinkedAlphaAsync(global::Contracts.Grpc.Beta.GetLinkedAlphaRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLinkedAlphaAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Contracts.Grpc.Beta.GetLinkedAlphaResponse> GetLinkedAlphaAsync(global::Contracts.Grpc.Beta.GetLinkedAlphaRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetLinkedAlpha, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override BetaServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new BetaServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(BetaServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetLinkedAlpha, serviceImpl.GetLinkedAlpha).Build();
    }

  }
}
#endregion
